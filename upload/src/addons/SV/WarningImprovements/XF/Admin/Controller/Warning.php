<?php

namespace SV\WarningImprovements\XF\Admin\Controller;

use XF\Mvc\ParameterBag;

/**
 * Extends \XF\Admin\Controller\Warning
 */
class Warning extends XFCP_Warning
{
    public function actionIndex(ParameterBag $params)
    {
        return parent::actionIndex($params); // TODO: Change the autogenerated stub
    }

    public function actionLoadTree()
    {

    }

    public function actionSyncTree()
    {

    }

    public function actionRenameTreeItem()
    {

    }

    public function actionEdit(ParameterBag $params)
    {
        return parent::actionEdit($params); // TODO: Change the autogenerated stub
    }

    public function warningAddEdit(\XF\Entity\WarningDefinition $warning)
    {
        return parent::warningAddEdit($warning); // TODO: Change the autogenerated stub
    }

    public function actionSave(ParameterBag $params)
    {
        return parent::actionSave($params); // TODO: Change the autogenerated stub
    }

    public function _actionAddEdit(\XF\Entity\WarningAction $action)
    {
        return parent::_actionAddEdit($action); // TODO: Change the autogenerated stub
    }

    public function defaultActionAddEdit(\SV\WarningImprovements\Entity\WarningDefault $defaultAction)
    {
        $viewParams = [
            'actionAction' => $defaultAction
        ];
        return $this->view('XF:Warning\Action\Edit', 'warning_action_edit', $viewParams);
    }

    public function actionDefaultEdit(ParameterBag $params)
    {
        $defaultAction = $this->assertDefaultExists($params->warning_default_id);
        return $this->defaultActionAddEdit($defaultAction);
    }

    public function actionDefaultAdd()
    {
        /** @var \SV\WarningImprovements\Entity\WarningDefault $defaultAction */
        $defaultAction = $this->em()->create('SV\WarningImprovements:WarningDefault');
        return $this->defaultActionAddEdit($defaultAction);
    }

    protected function defaultSaveProcess(\SV\WarningImprovements\Entity\WarningDefault $defaultAction)
    {
        $form = $this->formAction();

        $input = $this->filter([
            'threshold_points' => 'uint',
            'expiry_extension' => 'uint',
            'expiry_type' => 'str',
            'active' => 'bool'
        ]);
        $form->basicEntitySave($defaultAction, $input);

        return $form;
    }

    public function actionDefaultSave(ParameterBag $params)
    {
        $this->assertPostOnly();

        if ($params->warning_default_id)
        {
            $defaultAction = $this->assertDefaultExists($params->warning_default_id);
        }
        else
        {
            /** @var \SV\WarningImprovements\Entity\WarningDefault $defaultAction */
            $defaultAction = $this->em()->create('XF:WarningDefinition');
        }

        $this->defaultSaveProcess($defaultAction)->run();

        return $this->redirect(
            $this->buildLink('warnings') . $this->buildLinkHash('warning_default-' . $defaultAction->getEntityId())
        );
    }

    public function actionDefaultDelete()
    {

    }

    public function categoryAddEdit()
    {

    }

    public function actionCategoryAdd()
    {

    }

    public function actionCategoryEdit()
    {

    }

    public function actionCategorySave()
    {

    }

    public function actionCategoryDelete()
    {

    }

    /**
     * @param $id
     * @param null $with
     * @param null $phraseKey
     *
     * @return \SV\WarningImprovements\Entity\WarningDefault
     */
    protected function assertDefaultExists($id, $with = null, $phraseKey = null)
    {
        return $this->assertRecordExists('SV\WarningImprovements:WarningDefault', $id, $with, $phraseKey);
    }
}